---
title: "mg_metab_2023"
format: html
editor: visual
---

```{r}
library(dplyr)
library(knitr)
library(reticulate)
#library(lme4)
library(lmerTest)
library(magrittr)
library(kableExtra)
```

```{python}
import os
import prince

import numpy as np
import pandas as pd
```

```{python}
data_path = (f"~/Dropbox/Brain/data/inper/mg_metab_136m_2023/db/")
fname = "ORP 2023 MG Metab 136m v2.xlsx"
fname = os.path.expanduser(data_path) + fname
fname
```

```{python}
data = pd.read_excel(fname, sheet_name=['wide', 'long'])
wide = data['wide'].set_index('Exp_OBESO')
long = data['long'].set_index('Exp_OBESO')
#
#df = long.join(wide, validate='m:1').reset_index()
#

cols_mat = ['Peso_preg_mat', 'Talla_mat', 'IMC_preg_mat', 'Dx_IMC_preg_mat', 'Edad_mat', 'MG_mat_1T',
            'porc_MG_mat_1T', 'SDG_3T', 'Peso_mat_3T ', 'GP_mat_3T']
```

```{python}
diff_wide = long.reset_index()[['Exp_OBESO', 'tiempo', 'MG_kg_PP']].pivot_table(index='Exp_OBESO', columns='tiempo')
diff_wide.columns = ['1M', '3M', '6M']

diff_wide = diff_wide.assign(diff = diff_wide['3M'] - diff_wide['1M'])\
                   .drop(columns=['1M', '3M', '6M'])

df = wide.join(diff_wide)\
         .drop(columns='Exp_INPer')\
         .join(long[['tiempo', 'LME']].pivot(columns='tiempo')[('LME', 2)])
         
df.columns = list(df.columns[:-1]) + ['LME_2']
#
cols = ['diff', 'Peso_preg_mat', 'Talla_mat', 'IMC_preg_mat',
        'Dx_IMC_preg_mat', 'Edad_mat', 'MG_mat_1T', 'porc_MG_mat_1T',
        'SDG_3T', 'Peso_mat_3T', 'GP_mat_3T', 'Peso_neon',
        'Longitud_neon',  'IMC_neon', 'C_Abdomen_neon', 'LME_2']

df  = df[cols].dropna()

```


```{r}
modelo <- lm( diff ~ IMC_preg_mat + IMC_neon + C_Abdomen_neon + 
                     LME_2 + GP_mat_3T,
             data = py$df)

summary(modelo)
```


```{python}
famd = prince.FAMD(
    n_components=3,
    n_iter=100,
    copy=True,
    check_input=True,
    engine="sklearn"
)
df_mat = df[cols_mat]
df_mat = df_mat.assign(Dx_IMC_preg_mat=df_mat['Dx_IMC_preg_mat'].astype('category'))
famd = famd.fit(df_mat)
#
famd.eigenvalues_summary
```

```{python}
famd.row_coordinates(df_mat)
```
```{python}
famd.column_coordinates_
```
```{python}
plot = famd.plot(df_mat,
                 x_component=0,
                 y_component=2  )

output_file = "famd_plot.html"
plot.save(output_file)
os.system(f"xdg-open {output_file}")
```

```{python}
df_mat_famd = famd.row_coordinates(df_mat)
df_mat_famd.columns = ["C_mat_1", "C_mat_2", "C_mat_3"]

df_nlss = df.drop(columns=cols_mat)
df_nlss = df_nlss.assign(**df_mat_famd)
```




```{r}
modelo_lmm <- lmer(MG_kg_PP ~ IMC + C_Abdomen +
                   C_mat_1 + C_mat_2 + C_mat_3 +
                   IMC_neon + C_Abdomen_neon + Inicio_AC + LME +
                   (1 + tiempo | Exp_OBESO) + (1 | Sexo), data = py$df_nlss, REML = TRUE)

summary(modelo_lmm)
```

```{r}
modelo_lmm1 <- lmer(C_Abdomen ~ IMC +
                   IMC_preg_mat	+	Edad_mat	+	porc_MG_mat_1T + GP_mat_3T +
                   IMC_neon + C_Abdomen_neon + Inicio_AC + LME +
                   (1 + tiempo | Exp_OBESO), data = py$df, REML = TRUE)
 
summary(modelo_lmm1)
```


```{python}
imc_wide = df_nlss[['Exp_OBESO', 'tiempo', 'IMC']].pivot_table(index='Exp_OBESO', columns='tiempo')
imc_wide.columns = ['1M', '3M', '6M']
#
imc_wide['3M'] - imc_wide['1M']
```



```{r}
modelo_lmm2 <- lm(C_Abdomen_neon ~ IMC +
                   C_mat_1 + C_mat_2 + C_mat_3 
                   , data = py$df_nlss %>% filter(tiempo == 1))
 
summary(modelo_lmm2)
```


